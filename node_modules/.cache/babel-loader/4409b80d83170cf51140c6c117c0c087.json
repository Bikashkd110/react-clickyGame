{"ast":null,"code":"var _jsxFileName = \"/Users/bikashkadariya/Desktop/clicky/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport ImageHolder from \"./components/ImageHolder\";\nimport Wrapper from \"./components/Wrapper\";\nimport NavBar from \"./components/NavBar\";\nimport Footer from \"./components/footer\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport cards from \"./cards.json\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cards,\n      imagesClicked: [],\n      topScore: 0,\n      score: 0,\n      message: \"\",\n      shakeit: \"false\"\n    };\n\n    this.cardClicked = id => {\n      //Picture array shuffled.\n      const shuffledCard = this.shuffleArray(cards);\n      this.setState({\n        cards: shuffledCard\n      }); // if clicked an image already clicked set this.state.score = 0; empty clickeadArray, end of if block\n\n      if (this.state.imagesClicked.includes(id)) {\n        this.setState({\n          score: 0,\n          imagesClicked: [],\n          message: \"Same image clicked twice, Click aagain to start!\",\n          shakeit: \"true\"\n        });\n      } else {\n        this.setState({\n          imagesClicked: this.state.imagesClicked.concat([id]),\n          score: this.state.score + 1,\n          message: \"Correct\",\n          shakeit: \"false\"\n        });\n      } // holding the topscore.\n\n\n      if (this.state.score > this.state.topScore) {\n        this.setState({\n          topScore: this.state.score\n        });\n      }\n    };\n\n    this.shuffleArray = picturesArray => {\n      for (let i = picturesArray.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        var _ref = [picturesArray[j], picturesArray[i]];\n        picturesArray[i] = _ref[0];\n        picturesArray[j] = _ref[1];\n      }\n\n      return picturesArray;\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(NavBar, {\n      score: this.state.score,\n      topScore: this.state.topScore,\n      message: this.state.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(Wrapper, {\n      shakeWrapper: this.state.shakeit,\n      pictures: this.state.cards.map(picture => React.createElement(ImageHolder, {\n        cardClicked: this.cardClicked,\n        id: picture.id,\n        key: picture.id,\n        name: picture.name,\n        image: picture.image,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bikashkadariya/Desktop/clicky/src/App.js"],"names":["React","Component","ImageHolder","Wrapper","NavBar","Footer","Jumbotron","cards","App","state","imagesClicked","topScore","score","message","shakeit","cardClicked","id","shuffledCard","shuffleArray","setState","includes","concat","picturesArray","i","length","j","Math","floor","random","render","map","picture","name","image"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport ImageHolder from \"./components/ImageHolder\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport NavBar from \"./components/NavBar\";\r\nimport Footer from \"./components/footer\";\r\nimport Jumbotron from \"./components/Jumbotron\";\r\nimport cards from \"./cards.json\";\r\n\r\nclass App extends Component {\r\n  // Setting this.state.cards to the cards json array\r\n  state = {\r\n    cards,\r\n    imagesClicked: [],\r\n    topScore: 0,\r\n    score: 0,\r\n    message: \"\",\r\n    shakeit: \"false\"\r\n  };\r\n\r\n  cardClicked = id => {\r\n    //Picture array shuffled.\r\n     const shuffledCard = this.shuffleArray(cards);\r\n     this.setState({cards: shuffledCard});\r\n     // if clicked an image already clicked set this.state.score = 0; empty clickeadArray, end of if block\r\n     \r\n     if (this.state.imagesClicked.includes(id)) {\r\n       this.setState({ score: 0, imagesClicked: [], message: \"Same image clicked twice, Click aagain to start!\", shakeit: \"true\"});\r\n     }\r\n     else {\r\n       this.setState({\r\n         imagesClicked: this.state.imagesClicked.concat([id]),\r\n         score: this.state.score + 1,\r\n         message: \"Correct\",\r\n         shakeit: \"false\"\r\n       });\r\n     }\r\n     // holding the topscore.\r\n     if (this.state.score  > this.state.topScore) {\r\n       this.setState({ topScore: this.state.score });\r\n     }\r\n     \r\n   }\r\n   shuffleArray = (picturesArray) => {\r\n       for (let i = picturesArray.length - 1; i > 0; i--) {\r\n           const j = Math.floor(Math.random() * (i + 1));\r\n           [picturesArray[i], picturesArray[j]] = [picturesArray[j], picturesArray[i]];\r\n       }\r\n       return picturesArray;\r\n\r\n    }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Jumbotron/>\r\n        \r\n        <NavBar \r\n          score={this.state.score}\r\n          topScore={this.state.topScore}\r\n          message={this.state.message}\r\n        />\r\n\r\n        <Wrapper\r\n          shakeWrapper = {this.state.shakeit}\r\n          pictures=\r\n            {this.state.cards.map(picture => (\r\n              <ImageHolder\r\n                cardClicked={this.cardClicked}\r\n                id={picture.id}\r\n                key={picture.id} \r\n                name={picture.name}\r\n                image={picture.image}\r\n              />\r\n            ))}\r\n        />  \r\n\r\n        <Footer/> \r\n          \r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}